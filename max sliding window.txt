class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
         //after optimising
         deque<int> dq;
         vector<int> ans;
         int n = nums.size();

         for(int i=0;i<nums.size();i++){
          //first removing out of boundary index
          if(!dq.empty() && dq.front()==i-k ){
              dq.pop_front();
          }

          while(!dq.empty() && nums[dq.back()] < nums[i]){
              dq.pop_back();
          }

          dq.push_back(i);//it would enter from back of the dequeue

          if(i>=k-1){
              ans.push_back(nums[dq.front()]);
          }
         } 
         return ans;





    //solving using brute force 
    //     int n = nums.size();
    //     vector<int> ans(n-k+1);

    //     for(int i=0;i<=n-k;i++){
    //         int final = INT_MIN;
    //         for(int j=i;j<i+k;j++){
    //            final = max(final,nums[j]);
    //         }
    //         ans[i] = final;
    //     }
    //  return ans;
     } 
 
};